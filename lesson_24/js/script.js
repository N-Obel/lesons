"use strict"

// Задача №1
let someVar = 0;
++someVar;

if (someVar) {
	console.log(someVar);
}

//Відповідь:
// Створюємо змінну someVar, якій присвоюємо значення 0. Далі префіксним інкрементом збільшуємо значення нашої змінної. 
// І оскілький число 1 в булевому значенні true, умова if спрацьовує, і видає в консоль результат інкрементованної змінної someVar, а саме 1.


/*
Задача №2
За допомогою циклу FOR виведіть в консоль 10 рядків:
Пункт №1
Пункт №2
і т.д.
*/

for (let i = 1; i <= 10; ++i) {
	console.log(`Пункт №${i}`)
}

//Відповідь:
// Створюємо цикл for у якого початкове значення у вигляді змінної let i = 1; (Пункт №1), потім ми вказуємо умову циклу : пройти від початку (i = 1) та закінчити на моменті коли 
// умова не зможе виконатись, а саме i буде > 10, тобто 10 <= 10 - ще працює, а 11 < 10 - вже ні, і на цьому моменті цикл припиняється.
// крок збільшуємо на один одинцю кожен раз, шляхом інкрементування 'i' (не знаю чи є таке слово:) )


/*
Задача №3
Що потрапить в консоль ?
*/

if (2 * 20 <= 10 || 30 / 2 < 5 && 10 <= "10" || 20 === "20") {
	console.log('000');
}

// Відповідь:
// Розіб’ємо умову if на кроки :

// 1) (40 <= 10 || 15 < 5) - спочатку виконуються математичні оператори (*, /). Оскільки логічний оператор "або" має повернути хоча б одне значення true,
// в нашому випадку ми отримаємо (false || false).

// 2) (10 <= "10" || 20 === "20") - перевіряємо другу умови логічного оператора "або" ->
// в нашому випадку ми отримаємо (true || false), оскіль 10 дорівнює 10, а число 20 суворо неможе дорівнювати рядку "20", бо при суворому порівнянні відбувається
// порівняння по типу даних
// До того ж, оператор "або" як тільки бачить перше "true" він зупиняється і другу умову (20 === "20") - навіть не розглядає

// 3) Отримуємо (false || false && true || false). Далі виконується логічний оператор "та", який спрацьовує коли обидва значення відповідають булевому "true".
// В нашому випадку буде false.

// 4) Тепер вигляд умови (false || false || false), і оскільки "або" не знаходить "true" ->
// В консоль нічого не виведеться, оскільки умова "if" (без else) спрацює лише в тому випадку, якщо значення умови true.


/*
Задача №4
Створіть функцію, яка повертає результат ділення числа a на число b з додаванням рядка "Результат ділення: "
Викличте функцію передаючі різні значення, у тому числі не передаючи зовсім.
Функція не має повертати NaN, Infinite або помилку 
*/

function calcDiv(a = 0, b = 0) {
	const result = a / b;
	if (isFinite (result)) {
		console.log(`Результат ділення: ${result}`);
		// console.log(typeof result);
	}
	else {
		console.log(`Дія неможлива!`);
		console.log(typeof result);
	}
}

calcDiv(4, 2)
calcDiv(-4, 2)
calcDiv(4, 0)
calcDiv(-4, 0)
calcDiv(0, 0)
calcDiv(NaN, 0)
calcDiv(0, NaN)
calcDiv("10", "2")
calcDiv(4, "Some text")
calcDiv("Some text", 4)
calcDiv(Infinity, -Infinity)

// Відповідь:
// 1) Об’являємо функцію calcDiv в початкові параметри якої передаємо (a = 0, b = 0);
// 2) Створюємо константу result якій привласнюємо результат ділення змінних із параметрів функції, а саме a / b;
// 3) Далі створюємо умову "if" в якій за допомогою глобальної функції JS "isFinite" перевіряємо результат ділення a / b;
// 4) isFinite перевірить чи є результат кінцевим числом і не являється Infinity або NaN
// 5) Якщо умова "if" - true -> в консолі отримаємо результат ділення
// 6) Якщо умова "if" - false -> в консолі отримаємо `Дія неможлива!`


/*
Задача №5
Створіть масив даних - 5 елементів, один з яких число 10
Обробіть масив за допомогою методу перебору
Перевіряйте елемент на відповідність числу 10, та у разі відповідності, виводьте в консоль
*/

let someArray = [5, "Nik", 10, null, "Kyiv"];

someArray.forEach((value, index) => {
	if (value === 10) {
		console.log(index);
		console.log(value);
	}
});

// Відповідь:
// 1) Створюємо змінну someArray якій привласнюємо масив даних [5, "Nik", 10, null, "Kyiv"];
// 2) За допомогою методу перебору масиву forEach, перевіряємо масив на наявність числа 10, а саме :
// 	- змінна 'value' - отримає значення елементу масива
//    - змінна 'index' - отримає ключ (ячейку) в якій знаходиться потрібне нам число
// 3) Якщо наша умова 'if' спрацює, і в масиві є потрібне число, ми отримаємо вивід в консоль у вигляді пари : ключ-значення.